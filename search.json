[{"categories":[],"content":"西塘共享资源库定位 西塘的OD共享资源库，此位置为资源的定位信息 不定期更新中 塘の选图 塘优APP 软件名 描述 链接 xshell8 不仅仅是一个ssh终端工具 xftp8 Linux_Reader 双系统文件互传，win端读取linux分区工具 Linux_Reader typora旧版 上手入门极简的基础markdown文本编辑器 typora Vmware15.5Pro 支持win11 typora 塘的资料 资料名 描述 链接 2024具身智能图谱 - 2024具身智能图谱 SU7u_gazebo模型 ros2 gazebo su7u模型，实现你开su7u的梦想 su7u 系统镜像 镜像名 描述 链接 Ubuntu20.04 amd64 Ubuntu Win11 Win11 24h2系统镜像 win11 ","date":"2025-09-08","objectID":"/tangfiles/:0:0","tags":[],"title":"Index","uri":"/tangfiles/"},{"categories":["Ubuntu"],"content":"虚拟机安装px4环境配置 安装和配置PX4 github clone源码，此处需要代理 [Linux 开启与关闭代理] # 开启代理 export http_proxy=http://IP:PORT export https_proxy=http://IP:PORT # 关闭代理 unset http_proxy unset https_proxy git clone https://github.com/PX4/PX4-Autopilot.git --recursive 成功后，进入文件夹继续下载组件 cd PX4-Autopilot/ git submodule update --init --recursive bash ./Tools/setup/ubuntu.sh # !!！reboot 重启机器 测试编译px4 make px4_sitl_default gazebo 安装mavros 编译成功显示gazebo后，退出。并安装mavros sudo apt-get install ros-noetic-mavros* 测试，并解决报错问题 roslaunch mavros px4.launch # 报错解决 sudo /opt/ros/noetic/lib/mavros/install_geographiclib_datasets.sh 切换PX4版本 成功后切换PX4版本至工程需要的版本 我这里配置工程 ego visual, 需要版本为1.12.3 git checkout v1.12.3 git submodule update --init --recursive 安装jdk8, 并切换版本 sudo apt install openjdk-8-jdk sudo update-alternatives --config java # 选择Java 8 的指令 rm -rf Tools/jMAVSim/out 编译jmavsim make clean make px4_sitl_default jmavsim 安装QGC 根据官网提示安装 QGC ","date":"2025-07-29","objectID":"/ubt20_px4/:0:0","tags":["Ubuntu20","PX4"],"title":"虚拟机Ubuntu20配置px4相关环境","uri":"/ubt20_px4/"},{"categories":["无人机"],"content":"鲁班猫Cat5V2开发板，或者指鲁班猫Linux系列开发板40pin接口（树莓派同款接口），默认为复用关闭状态，所以要使用指定功能需要配置复用 ⛏ 官方链接 其中串口的引脚关系如下表所示 串口 引脚 功能 TXD 8 发送信号线 RXD 10 接受信号线 对应实物的40pin接口 使能串口 #进入工具配置 sudo fire-config 移动到外设选项，我这里使用的串口将所有uart相关的都选择上，确认重启即可 额外修改 因为要与PX4飞控进行通信，飞控端设置的通信频率为921600，所以板载端也要同样修改。官方指定中没用我们的板子，可能太新未来的及更新？通过检查使用的是S1 LubanCat-Zero系列使用的是ttyS8 LubanCat-1系列和LubanCat-2系列使用的是ttyS3 为了保持频率相同，需要修改ttyS1频率 #在板卡的终端执行如下命令 查询频率 stty -F /dev/ttyS1 #设置通讯速率，其中ispeed为输入速率，ospeed为输出速率 stty -F /dev/ttyS1 ispeed 921600 ospeed 921600 使用cat命令检查是否有信息接收（虽然是乱码） 修改 mavros 下的 px4. launch, 将串口修改为 /dev/ttyS1 ","date":"2025-07-16","objectID":"/lubancat_px4uart/:0:0","tags":["UAV","lubanCat"],"title":"【无人机】鲁班猫Cat5V2与PX4飞控的通信篇","uri":"/lubancat_px4uart/"},{"categories":["百记"],"content":"一篇完整的git命令使用教程 记得很久以前，大概两年左右吧，为了方便自己查阅以及实验室朋友们的使用，搓了一篇git使用教程，很惭愧它特别的粗糙，并且还躺在我的blog里，现在作为gitee/github专业单词拼写专家，还是想精细化这个教程，同样是为了自己查阅，还有方便搜索到的朋友查看。 前提 前提条件 拥有一个gitee/github账号 会创建一个基础的仓库 Linux/Win下已经安装了git，并且Win下知道右键打开Git Bash 新建仓库 首先，你需要在gitee/github上新建一个仓库，新建好后不要着急退出。会看到类似于这样的代码块 echo \"# testgit\" \u003e\u003e README.md git init git add README.md git commit -m \"first commit\" git branch -M main git remote add origin git@github.com:sheetung/testgit.git git push -u origin main #…or push an existing repository from the command line git remote add origin git@github.com:sheetung/testgit.git git branch -M main git push -u origin main 这里给出了一个使用SSH的基础的连接操作其实也就这么多操作，接下来来到电脑端，我使用的是Ubuntu，Win下一样 添加SSH公钥 当然使用http远程管理仓库也是可行的，方法更简单。这里使用SSH是为了专业 首先不管是Linux还是Win，均可使用相同的命令生成SSH Key，命令后回车三次 # -t key 类型 -C 注释,随意可以是 计算机名，你的名字，Email... ssh-keygen -t rsa -C \"email\" 生成后，有类似如下显示 ubt@ubt:~$ ssh-keygen -t rsa -C \"email\" Generating public/private rsa key pair. Enter file in which to save the key (/home/ubt/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/ubt/.ssh/id_rsa Your public key has been saved in /home/ubt/.ssh/id_rsa.pub The key fingerprint is: SHA256:0fefZMlW9pYVBnOZ3urEl6yMzyCjtzvM8UivXkYvtCQ email The key's randomart image is: +---[RSA 3072]----+ | o.+o| | . +o.| | . . . . =| | . . ..oB| | SE + .oO+| | o= o B=o| | +o=*o+.o.| | .*=++o. | | .o== .o | +----[SHA256]-----+ 可见，Linux下SSH保存在/home/ubt/.ssh/id_rsa.pub内 # cat copy cat /home/ubt/.ssh/id_rsa.pub Win则保存在C盘用户\u003e用户名\u003e.ssh(隐藏文件夹)下，可直接用记事本打开 将复制好的SSH Key，来到gitee/github的设置页面，找到SSH 公钥粘贴进去即可 初始化仓库 在工程内打开终端，Win下右键打开Git Bash 首先配置你的git config git config --global user.name “你的名字” git config --global user.email \"注册的邮箱\" 仓库初始化 git init # 如果已有文件或者不需要readme可不执行这一步 echo \"# testgit\" \u003e\u003e README.md git add README.md # 推送三件套,三件套中不包括git remote # git add 也可以单个文件或者文件夹添加，--\u003ebaidu git add . git commit -m \"first commit\" git remote add origin ******.git # -u 第一次的参数 以后只需 git push origin main 此处gitee是master git push -u origin main 此时不出意外已经完成了仓库的推送，刷新你的仓库即可看到文件 同步远程仓库 如果已经拥有一个仓库，需要本地同步，那就这样这样这样 # 初始化本地仓库 git init # 链接远程仓库 git remote add origin ******.git # pull远程仓库的main分支 git pull origin main 仓库提交三件套 # 一般情况下，可以对所有文件进行直接提交，三件套如下 git add . git commit -m \"[M]:又掉了一根头发\" git push origin main git相关知识点 git remote删除本地对应的远程地址 #查看远程 git remote -v # 删除并重建 git remote remove origin # 重建，建议使用ssh密钥 git remote add origin git@***.com:******.git push忽略 .gitignore，放入不想上传的文件或者文件夹，例如编译产生的build文件，与工程无关的测试文件等 git commit规范化 当然，开心就好，这个随意 git commit -m \"[M]:update...\" ??：表示未被 Git 跟踪的新文件（Untracked files）。 A：表示新添加到暂存区（staged）的文件（Added）。 M：表示文件被修改了（Modified）。 D：表示文件被删除了（Deleted）。 R：表示文件被重命名了（Renamed）。 C：表示文件复制了一份（Copied）。 U：表示文件在合并时发生了冲突（Unmerged）。 分支的提交与合并 将本地的 tabbar 分支进行本地的 commit 提交： git add . git commit -m \"完成了 tabBar 的开发\" 将本地的 tabbar 分支推送到远程仓库进行保存： git push -u origin tabbar 将本地的 tabbar 分支合并到本地的 master 分支： git checkout master git merge tabbar 删除本地的 tabbar 分支： git branch -d tabbar git版本的切换 1.查看历史版本 可以在仓库中或者使用命令 git log 查看 2.然后切换到指定版本 git checkout [ID] 3.如果不放心使用 git branch 查看当前本地分支 ","date":"2025-07-12","objectID":"/git_use/:0:0","tags":["git"],"title":"GIT使用教程 通关版","uri":"/git_use/"},{"categories":["百记"],"content":"简单但是功能完善的静态博客搭建教程，希望帮到你 前提 搭建Hugo博客首先需要满足以下条件： 拥有一个GitHub账号 拥有一台服务器或者电脑也可以 额外：拥有一个域名用来做cname映射，非必需 注意 本文主要使用Ubuntu即Linux操作系统完成，win等其他系统在安装和使用上会略有不同。 win系统对于命令操作可以打开终端进行 按照本文教程结束后你将拥有一个前后端分离的Hugo静态博客以及Fixit主题，并且拥有搜索功能，评论功能，友链功能。 Hugo博客系统搭建 1. 安装 首先到Hugo官方下载满足系统要求的Hugo extended 版本，推荐在HugoReleases中下载指定版本，推荐最新版（图片仅为旧版截图未及时更换） v0.148.1, 我是使用树莓派安装的Ubuntu操作系统，所以我选择的是 hugo_extended_0.145.0_linux-arm64.deb 版本，教程中稍有不同。 下载后win系统需要解压使用，.deb 格式的Linux安装包需要使用命令 sudo dkpg -i hugo_extended_0.145.0_linux-arm64. deb 安装使用 安装完成后可以查看版本号验证是否安装成功, 如果有版本号返回代表安装成功 hugo version 2.创建你的第一个博客 Hugo提供了一个简单的指令来创建一个新的博客网站，找到一个合适的位置，my_website 可以修改为任意你期望的名字 hugo new site my_website cd my_website 当然此时已经搭建好了一个初始博客，但是还没有安装主题和写文章罢了，使用 hugo server 命令来本地浏览你的博客 # bind=0.0.0.0 用于指定服务器绑定的 IP 地址，可以让局域网内任意设备访问 hugo server --bind=0.0.0.0 然后打开你的浏览器输入 http://你的服务器IP:1313 来验证吧 3. 安装主题 我这里使用的是 FixIt 主题，有着丰富的社交和评论系统支持，拥有扩展功能以及性能优越。使用git命令安装主题包，如果不会使用git可以看这篇教程或者手动下载。 # 可以直接克隆或者选择子模块方式二选一安装 #git clone https://github.com/hugo-fixit/FixIt.git themes/LoveIt git submodule add https://github.com/hugo-fixit/FixIt.git themes/LoveIt 提示 可以去官方手动下载稳定版 0.3.20 Source code即可，解压到theme文件夹下 4. 主题基础配置 这里直接从你下载的主题内，即 theme/FixIt 下复制 hugo.toml 到博客目录下 hugo.toml, 或者直接复制其中内容覆盖 # your site 目录，使用命令复制配置文件 cp themes/FixIt/hugo.toml . 此时你的博客目录下就有了一个完整的配置文件，可以先将如下内容进行修改，使得博客为中文语言 baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"FixIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true ","date":"2025-07-11","objectID":"/build_hugo_blog/:0:0","tags":["Hugo","blog"],"title":"Hugo：零成本搭建一个带有评论和搜索系统的静态博客","uri":"/build_hugo_blog/"},{"categories":[],"content":"sheetung的一个静态博客 静态好文明，等待我的博客部署在了阿里云到期了，转战静态，也尝试同步在静态更新帖子。 暂时使用的github.io，等西塘博客完全停摆之后部署服务器 ","date":"2025-07-09","objectID":"/about/:0:0","tags":[],"title":"About","uri":"/about/"}]